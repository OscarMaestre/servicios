package com.ies.servidoreco;

public class LanzadorClientes {
	public boolean servidorAtendioClientes(int numClientes){
		//En este metodo lanzamos x clientes y luego comprobamos
		//si todos funcionaron bien. Si todo fue bien
		//devolvemos true y si no devolveremos false
		Thread[] hilos=new Thread[numClientes];
		Cliente[] clientes=new Cliente[numClientes];
		for (int i=0;i<numClientes;i++){
			Cliente cliente=new Cliente();
			Thread hiloAsociado=new Thread(cliente);
			hiloAsociado.start();
			hilos[i]=hiloAsociado;
			clientes[i]=cliente;
		}
		/* Esperamos que todos los hilos acaben
		 * dandoles un plazo maximo de 10.000 ms
		 * Si en ese tiempo no se completó
		 * una operación tan simple, probablemente
		 * el servidor falló*/
		for (int i=0; i<numClientes; i++){
			try {
				hilos[i].join(10000);
			} catch (InterruptedException e) {
				System.out.println(
					"Se interrumpió un hilo por parte "+
					"de alguna clase del cliente ");
			}
		} //Fin del for que espera a los hilos
		/* Comprobamos si todos los hilos están bien
		 * y en cuanto uno sufra un fallo podemos 
		 * asumir que el servidor no pudo atender tantos
		 * clientes*/
		for (int i=0; i<numClientes; i++){
			if (clientes[i].huboFallo()){
				return false;
			}
		} //Fin del for
		//Si llegamos aquí es porque el servidor
		//pudo atender a todos los clientes a la vez
		return true;
	}
	public static void main(String[] args) {
		LanzadorClientes lanzador=new LanzadorClientes();
		/* Vamos probando a lanzar muchos clientes
		 * hasta que forcemos un fallo
		 */
		for (int i=0; i<1000; i++){
			bool todoOK;
			todoOK=lanzador.servidorAtendioClientes(i*100);
		}

	}

}
